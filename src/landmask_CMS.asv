%% Script to create a landmask from USCROMS hydrodynamic files
%   19 May 2025

clear;clc

%% setup

% Get the project root directory
projectPath = matlab.project.rootProject().RootFolder;

% Define paths relative to the project root
dataPath = fullfile(projectPath, 'data');
srcPath = fullfile(projectPath, 'src');
outputPath = fullfile(projectPath, 'output');

%%


%select 2019 USCROMS grid file
files = dir(fullfile(tempPath, 'nest_1_*'));
randomIndex = randi(length(files)); % generate a random index between 1 and the number of files
baseFileName = files(randomIndex).name;
ncdisp(fullfile(tempPath, baseFileName))  % Pass the full path to ncdisp

targetFile = 'vigrid.nc'; % The specific file we want to find
% fullFilePath = fullfile(dataPath, targetFile);


baseFileName = fullfile(dataPath, targetFile);


%extract USCROMS bathymetry and rho-coordinates
USCROMSgrid = 'vigrid.nc';
% ncdisp(USCROMSgrid)
bathymetry = ncread(USCROMSgrid, 'h');
longitudes_rho_USCROMS = ncread(USCROMSgrid, 'lon_rho') + 360;
latitudes_rho_USCROMS = ncread(USCROMSgrid, 'lat_rho');
longitudes_u_USCROMS = ncread(USCROMSgrid, 'lon_u') + 360;
latitudes_u_USCROMS = ncread(USCROMSgrid, 'lat_u');
longitudes_v_USCROMS = ncread(USCROMSgrid, 'lon_v') + 360;
latitudes_v_USCROMS = ncread(USCROMSgrid, 'lat_v');
mask = ncread(USCROMSgrid, 'mask_rho');



bathymetry = ncread(fullfile(dataPath, 'vigrid.nc'), 'h');




%make sure land is ignored
bathymetry(bathymetry==0) = NaN;
bathymetry(mask == 0) = NaN;

%construct landmasks for u- and v-grids
cd(scriptDrive)
USCROMSocean = 'croco_his.03969.nc';
wvel = ncread(USCROMSocean, 'w');
uvel = ncread(USCROMSocean, 'u');
uvel = uvel(:,:,:,1);
uvel = uvel(:,:,size(uvel, 3):-1:1); %flip so velocities are surface to bottom
uvel = uvel(:,:,1); %extract surface layer
mask_u = uvel;
mask_u(mask_u ~= 0) = 1; %the ocean is 1's, land is 0's
vvel = ncread(USCROMSocean, 'v');
vvel = vvel(:,:,:,1);
vvel = vvel(:,:,size(vvel, 3):-1:1); %flip so velocities are surface to bottom
vvel = vvel(:,:,1); %extract surface layer
mask_v = vvel;
mask_v(mask_v ~= 0) = 1;

%extract release point coordinates from GIS output and ensure they are
% sorted by their unique ID
relpoints = readmatrix('points_650_none-on-land.csv');
relpoints = relpoints(:, 10:12);
relpoints = sortrows(relpoints, 1);

IDs_PREDICT = relpoints(:,1);
longitudes_PREDICT = relpoints(:,2) + 360;
latitudes_PREDICT = relpoints(:,3);

% Locate USCROMS rho-grid points (and associated bathymetric values)
% nearest to PREDICT points, as well as u- and v-grid points
idx_rho_USCROMS_PREDICT = knnsearch([longitudes_rho_USCROMS(:), latitudes_rho_USCROMS(:)], [longitudes_PREDICT, latitudes_PREDICT]);
idx_u_USCROMS_PREDICT = knnsearch([longitudes_u_USCROMS(:), latitudes_u_USCROMS(:)], [longitudes_PREDICT, latitudes_PREDICT]);
idx_v_USCROMS_PREDICT = knnsearch([longitudes_v_USCROMS(:), latitudes_v_USCROMS(:)], [longitudes_PREDICT, latitudes_PREDICT]);

%% Construct the landmask polygons (boundaries)

%rho
% Binary landmask contours
mask_plot = mask;
mask_plot(mask_plot == 0) = NaN;
mask_plot(~isnan(mask_plot)) = 0;
mask_plot(isnan(mask_plot)) = 1;

% Lon/lat vectors
lat = latitudes_rho_USCROMS(1, :)';
lon = longitudes_rho_USCROMS(:, 1);

% Make the landmask
trace = bwboundaries(mask_plot); 
for i = 1:length(trace)
    trace{i}(:, 1) = lon(trace{i}(:, 1));
    trace{i}(:, 2) = lat(trace{i}(:, 2));
end

% Create land polygons
land = struct();
for k = 1:length(trace)
    land(k).Geometry = 'Polygon';
    Xs = trace{k}(:, 1); % Might have to subtract 360 at the end
    Xs(end + 1) = NaN;
    land(k).X = Xs';
    Ys = trace{k}(:, 2);
    Ys(end + 1) = NaN;
    land(k).Y = Ys';
end

%u
% Binary landmask contours
mask_plot = mask_u;
mask_plot(mask_plot == 0) = NaN;
mask_plot(~isnan(mask_plot)) = 0;
mask_plot(isnan(mask_plot)) = 1;

% Lon/lat vectors
lat = latitudes_u_USCROMS(1, :)';
lon = longitudes_u_USCROMS(:, 1);

% Make the landmask
trace = bwboundaries(mask_plot); 
for i = 1:length(trace)
    trace{i}(:, 1) = lon(trace{i}(:, 1));
    trace{i}(:, 2) = lat(trace{i}(:, 2));
end

% Create land polygons
land_u = struct();
for k = 1:length(trace)
    land_u(k).Geometry = 'Polygon';
    Xs = trace{k}(:, 1); % Might have to subtract 360 at the end
    Xs(end + 1) = NaN;
    land_u(k).X = Xs';
    Ys = trace{k}(:, 2);
    Ys(end + 1) = NaN;
    land_u(k).Y = Ys';
end

%v
% Binary landmask contours
mask_plot = mask_v;
mask_plot(mask_plot == 0) = NaN;
mask_plot(~isnan(mask_plot)) = 0;
mask_plot(isnan(mask_plot)) = 1;

% Lon/lat vectors
lat = latitudes_v_USCROMS(1, :)';
lon = longitudes_v_USCROMS(:, 1);

% Make the landmask
trace = bwboundaries(mask_plot); 
for i = 1:length(trace)
    trace{i}(:, 1) = lon(trace{i}(:, 1));
    trace{i}(:, 2) = lat(trace{i}(:, 2));
end

% Create land polygons
land_v = struct();
for k = 1:length(trace)
    land_v(k).Geometry = 'Polygon';
    Xs = trace{k}(:, 1); % Might have to subtract 360 at the end
    Xs(end + 1) = NaN;
    land_v(k).X = Xs';
    Ys = trace{k}(:, 2);
    Ys(end + 1) = NaN;
    land_v(k).Y = Ys';
end
